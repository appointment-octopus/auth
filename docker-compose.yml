version: "3.8"

services:
  nginx:
    build:
      dockerfile: ./docker/nginx.Dockerfile
      context: .
    image: raelamorim/nginx
    container_name: nginx
    ports: 
      - 80:80
    networks: 
      - prod
    depends_on:
      - auth-api1
      - auth-api2
      - auth-api3
      - redis
      - auth-db

  auth-api1:
    container_name: auth-api1
    build:
      context: .
      dockerfile: Dockerfile.dev
    depends_on:
      - auth-db
      - redis
    volumes:
      - $PWD:/auth
    ports:
      - 5000:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]
    networks:
      - auth-network

  auth-api2:
    container_name: auth-api2
    build:
      context: .
      dockerfile: Dockerfile.dev
    depends_on:
      - auth-api1
      - auth-db
      - redis
    volumes:
      - $PWD:/auth
    ports:
      - 5000:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]
    networks:
      - auth-network

  auth-api3:
    container_name: auth-api3
    build:
      context: .
      dockerfile: Dockerfile.dev
    depends_on:
      - auth-api2
      - auth-db
      - redis
    volumes:
      - $PWD:/auth
    ports:
      - 5000:5000
    env_file:
      - .env
    entrypoint: ["/bin/bash", "./entrypoints/build_app.sh"]
    networks:
      - auth-network

  redis:
    image: redis
    container_name: redis
    networks:
      - auth-network
    depends_on:
      - auth-db
    expose:      
      - '6379'

  auth-db:
    container_name: auth-db
    image: postgres:12.0
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./entrypoints/init_db.sh:/docker-entrypoint-initdb.d/
    networks:
      - auth-network
  
 
 
volumes:
  auth-db-data:

networks:
  auth-network:
    driver: bridge
